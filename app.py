import tkinter as tk
from tkinter import filedialog as fd
from tkinter import BOTH, E, EW, W, Toplevel, ttk
from tkinter import messagebox
from tkinter.messagebox import showerror
from threading import Thread
import re
import requests
import os
import json

import form_requester as fr
import url_discoverer as ud


class Window:

    def __init__(self, master):

        if os.path.isdir("Targets"):
            pass
        else: 
            os.mkdir("Targets")

        # VARIABLE SECTION

        self.wordlist_directory = None

        # END OF VARIABLE SECTION

        
        # MENU SECTION

        menu = tk.Menu(master, bg="grey", font = ("sans", "8", "bold"), borderwidth=0)
        master.config(menu=menu)

        file_menu = tk.Menu(menu)
        file_menu.add_command(label="Exit", command=self.exit_program)
        menu.add_cascade(label="File", menu=file_menu)

        target_menu = tk.Menu(menu)
        target_menu.add_command(label="New Target")
        target_menu.add_command(label="Load Target")
        menu.add_cascade(label="Target", menu=target_menu)

        settings_menu = tk.Menu(menu)
        settings_menu.add_command(label="Wordlist Directory Folder", command=self.set_wordlist_directory)
        menu.add_cascade(label="Settings", menu=settings_menu)

        # END OF MENU SECTION


        # STYLING SECTION

        self.style = ttk.Style()
        self.style.theme_use("default")
        self.style.configure("TNotebook.Tab", background="grey")
        self.style.configure("TNotebook", background="grey")
        self.style.configure("TFrame", background="light grey")
        self.style.configure("TLabel", background="light grey")

        self.style.configure("tk.TMenu", background="light grey")

        self.style.configure("TButton", background="light grey", borderwidth=1)
        self.style.map("TButton", foreground = [("active", "!disabled", "black")], background = [("active", "white")])

        # END OF STYLING SECTION

        # SETUP SECTION

        self.master = master
        self.master.title("Web App Tools")
        self.master.geometry("600x600")
        self.master.minsize(600,600)
        self.notebook = ttk.Notebook(self.master, padding="1.5px")
        self.notebook.pack(fill=BOTH, expand = True)

        # END OF SETUP SECTION


        # TABS SECTION

        frame1 = ttk.Frame(self.notebook)
        frame2 = ttk.Frame(self.notebook)
        frame3 = ttk.Frame(self.notebook)
        frame4 = ttk.Frame(self.notebook)
        frame5 = ttk.Frame(self.notebook)
        frame6 = ttk.Frame(self.notebook)
        frame7 = ttk.Frame(self.notebook)


        frame1.pack(fill= tk.BOTH, expand=True)
        frame2.pack(fill= tk.BOTH, expand=True)
        frame3.pack(fill= tk.BOTH, expand=True)
        frame4.pack(fill= tk.BOTH, expand=True)
        frame5.pack(fill= tk.BOTH, expand=True)
        frame6.pack(fill= tk.BOTH, expand=True)
        frame7.pack(fill= tk.BOTH, expand=True)


        self.notebook.add(frame1, text = "Target")
        self.notebook.add(frame2, text = "Form Requester")
        self.notebook.add(frame3, text = "Login Bruteforcer")
        self.notebook.add(frame4, text = "URL Discoverer")
        self.notebook.add(frame5, text = "Window 5")
        self.notebook.add(frame6, text = "Window 6")
        self.notebook.add(frame7, text = "Window 7")


        # END OF TABS SECTION


        # TARGET SECTION



        # END OF TARGET SECTION


        # FORM_REQUESTER SECTION

        frame2.grid_columnconfigure(1, weight=1)
        frame2.grid_columnconfigure(2, weight=1)

        self.fr_title_label = tk.Label(frame2, text="Enter URL of the page that contains the form:")
        self.fr_title_label.grid(row=0, column=1, columnspan=2, pady=5)

        self.fr_url_container = tk.Entry(frame2, width=50)
        self.fr_url_container.grid(row=1, column=1, padx=20, sticky=E)

        self.fr_start_button = tk.Button(frame2, text="Start", command=self.fr_start)
        self.fr_start_button.grid(row=1, column=2, sticky=W)



        self.fr_textbox = tk.Text(frame2, height=25)
        self.fr_textbox.grid(row=3, column=1, padx=20, pady=20, columnspan=2)


        # END OF FORM_REQUESTER SECTION


        # LOGIN BRUTEFORCE SECTION

        frame3.grid_columnconfigure(1, weight=1)
        frame3.grid_columnconfigure(2, weight=1)
        frame3.grid_columnconfigure(3, weight=1)

        self.bl_title_label = tk.Label(frame3, text="Enter POST URL to bruteforce:")
        self.bl_title_label.grid(row=0, column=1, columnspan=3, pady=5)

        self.bl_url_container = tk.Entry(frame3, width=50)
        self.bl_url_container.grid(row=1, column=1)
        self.bl_start_button = tk.Button(frame3, text="Start", command=self.bl_start)
        self.bl_start_button.grid(row=1, column=2, sticky=W)
        self.bl_test_response_button = tk.Button(frame3, text="Test")
        self.bl_test_response_button.grid(row=1, column=3, sticky=W)

        # END OF LOGIN BRUTEFORCE CONNECTION

        
        # URL DISCOVERER SECTION

        frame4.grid_columnconfigure(1, weight=1)
        frame4.grid_columnconfigure(2, weight=1)
        self.ud_title_label = tk.Label(frame4, text="Enter URL to bruteforce:")
        self.ud_title_label.grid(row=0, column=1, columnspan=4, pady=5)
        self.ud_url_container = tk.Entry(frame4, width=50)
        self.ud_url_container.grid(row=1, column=1, padx=20, sticky=E)
        self.ud_start_button = tk.Button(frame4, text="Start", command=self.ud_start)
        self.ud_start_button.grid(row=1, column=2, sticky=W)
        self.ud_stop_button = tk.Button(frame4, text="Stop", command=self.ud_stop)
        self.ud_stop_button.grid(row=1, column=2, sticky=W)
        self.ud_stop_button.grid_remove()
        self.ud_output_string = tk.StringVar()
        self.ud_output = tk.Label(frame4, textvariable=self.ud_output_string)
        self.ud_output.grid(row=3, column=1, columnspan=3)
        self.ud_textbox = tk.Text(frame4, height=25)
        self.ud_textbox.grid(row=4, column=1, padx=20, pady=20, columnspan=4)

        # END OF URL DISCOVERER SECTION

    # FUNCTION SECTION

    # MENU SECTION

    def exit_program(self):
        exit()


    def set_wordlist_directory(self):
        self.wordlist_directory = self.select_directory()
        print(self.wordlist_directory)


    # END OF MENU SECTION

    # REUSABLE SECTION

    def select_wordlist(self):
        filetypes = (
            ("text files", "*.txt"),
            ("All files", "*.*")
        )

        filename = fd.askopenfilename(
            title="Select A wordlist",
            filetypes=filetypes)
        return filename

    def select_directory(self):
        dir = fd.askdirectory(title="Select A Directory")
        return dir


    # END OF REUSABLE SECTION

    # FORM REQUESTER SECTION

    def fr_clear(self):
        print("Clear")
    
    def fr_start(self):
        
        url = self.fr_url_container.get().strip()
        if not re.match("^http://", url) and not re.match("^https://", url):
            url = "http://" + url
        try:
            requests.get(url)
            if requests.get(url).status_code != 200:
                messagebox.showerror(title=f"Status code: {requests.get(url).status_code}", message=f"There was an issue connecting to {url}")
                return

        except:
            messagebox.showerror(title=f"URL {url}", message=f"There was an issue connecting to {url}")
            return
        
        self.fr_textbox.insert("end", f"{url}:\n")
        payloads, likely_username, likely_password = fr.form_requester(url)
        if likely_username == None or likely_password == None:
            self.fr_textbox.insert("end", payloads)
            return
        for payload in payloads:
            self.fr_textbox.insert("end", payload + "\n")
        self.fr_textbox.insert("end", "\n")
        print(likely_username)
        print(likely_password)

    # END OF FORM REQUESTER SECTION

    # BRUTEFORCE LOGIN SECTION

    def bl_start(self):
        return

    # END OF BRUTEFORCE LOGIN SECTION

    # URL DISCOVERER SECTION

    def ud_start(self):
        url = self.ud_url_container.get().strip()
        if not re.match("^http://", url) and not re.match("^https://", url):
            url = "http://" + url


        try:
            requests.get(url)
            if requests.get(url).status_code != 200:
                messagebox.showerror(title=f"Status code: {requests.get(url).status_code}", message=f"There was an issue connecting to {url}")
                return

        except:
            messagebox.showerror(title=f"URL {url}", message=f"There was an issue connecting to {url}")
            return

        domain = url.split("/")[2]
        if os.path.isdir(f"Targets/{domain}"):
            pass
        else:
            os.mkdir(f"Targets/{domain}")

        self.ud_start_button.grid_remove()
        self.ud_stop_button.grid()
        wordlist = self.select_wordlist()

        self.discoverer_thread = ud.Discoverer(url, wordlist, self.ud_output_string, self.ud_textbox, domain)
        self.discoverer_thread.threading()



    def ud_stop(self):
        # self.select_directory()
        self.discoverer_thread.thread_monitor()
        self.ud_start_button.grid()
        self.ud_stop_button.grid_remove()
        


    
    


    # END OF URL DISCOVERER SECTION

    # END OF FUNCTION SECTION




if __name__ == "__main__":
    root = tk.Tk()
    window = Window(root)
    root.mainloop()